pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to build')
        booleanParam(defaultValue: false, description: 'Run Maven build?', name: 'mvn_build')
        booleanParam(defaultValue: false, description: 'Publish to Nexus?', name: 'publish_to_nexus')
    }

    tools {
        maven 'maven_3.9.9'
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "http://100.25.130.61:8088/"
        NEXUS_REPOSITORY = "ncodeit-helloworld"
        NEXUS_CREDENTIAL_ID = "nexus"
    }

    stages {
        stage("clone code") {
            steps {
                script {
                    git branch: "${params.BRANCH}", url: 'https://github.com/Syedshakeel23/spring3-mvc-maven-xml-hello-world-1.git'
                }
            }
        }

        stage("mvn build") {
            steps {
                script {
                    if (params.mvn_build) {
                       sh "${tool 'maven_3.9.9'}/bin/mvn -Dmaven.test.failure.ignore clean package"
                    } else {
                        echo "no build"
                    }
                }
            }
        }

        stage("publish to nexus") {
    steps {
        script {
            if (params.publish_to_nexus) {
                def pom = readMavenPom file: "pom.xml"
                def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                
                def artifactPath = filesByGlob[0].path
                def artifactExists = fileExists artifactPath

                if (artifactExists) {
                    echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}"
                    nexusArtifactUploader(
                        nexusVersion: NEXUS_VERSION,
                        protocol: NEXUS_PROTOCOL,
                        nexusUrl: NEXUS_URL, // make sure there's no extra http:// in NEXUS_URL variable
                        groupId: pom.groupId,
                        version: "${BUILD_NUMBER}",
                        repository: NEXUS_REPOSITORY,
                        credentialsId: NEXUS_CREDENTIAL_ID,
                        artifacts: [
                            [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging],
                            [artifactId: pom.artifactId, classifier: '', file: "pom.xml", type: "pom"]
                        ]
                    )
                } else {
                    error "*** File: ${artifactPath}, could not be found"
                }
            } else {
                echo "Skipping Nexus publish as per parameters"
            }
        }
    }
}
}
}
